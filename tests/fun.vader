Given fsharp:
Do (Inside a lambda):
  i
  List.mapi (fun i j ->\<CR>
  i, j\<CR>
  )

Expect:
  List.mapi (fun i j ->
    i, j
  )

Do (In a record in a lambda):
  i
  List.mapi (fun i j ->\<CR>
  {\<CR>
  value = i\<CR>
  thing = j\<CR>
  }\<CR>
  )

Expect:
  List.mapi (fun i j ->
    {
      value = i
      thing = j
    }
  )

Given fsharp:
  let processActions state =
    state.actions
    |> Map.fold (fun prev action ->
      let newState =
        match action with
        | "fire" -> fire prev
        | "move" -> move prev
        | _ -> prev

Do (Blank line inside lambda):
  Go
  \<CR>
  if (someCondition action) then\<CR>
  Action.doThing action newState\<CR>
  else newState\<CR>
  ) state

Expect:
  let processActions state =
    state.actions
    |> Map.fold (fun prev action ->
      let newState =
        match action with
        | "fire" -> fire prev
        | "move" -> move prev
        | _ -> prev

      if (someCondition action) then
        Action.doThing action newState
      else newState
    ) state

Given fsharp:
Do (Simulated auto-pairs parens insertion):
  i
  let someFunc () =\<CR>
  Map.fold ()\<Esc>i
  fun prev action ->\<CR>
  \<Esc>
  :doautocmd CursorMoved\<CR>
  O
  multiline\<CR>
  function body

Expect:
  let someFunc () =
    Map.fold (fun prev action ->
      multiline
      function body
    )

