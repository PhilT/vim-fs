Given fsharp:
Do:
  i
  let func =\<CR>
  doSomething

Expect:
  let func =
    doSomething

Do (Multiline function):
  i
  let func =\<CR>
  doSomething\<CR>
  doAnotherThing

Expect:
  let func =
    doSomething
    doAnotherThing

Given fsharp:
  let func =
    something

    something

Do (End function):
  Go
  \<CR>
  \<CR>
  let anotherFunc =\<CR>
  anotherThing

Expect:
  let func =
    something

    something


  let anotherFunc =
    anotherThing

Given fsharp:
  module MyModule =
    let func () =
      something
      if someCondition then
        doStuff
      else
        doOtherStuff

Do (End function when double indented):
  Go
  \<CR>
  \<CR>
  let anotherFunc () =\<CR>
  anotherThing

Expect:
  module MyModule =
    let func () =
      something
      if someCondition then
        doStuff
      else
        doOtherStuff


    let anotherFunc () =
      anotherThing

Given fsharp:
Do (Multiline function with line-breaks):
  i
  let processActions (state: SomeType) =\<CR>
  let a, b = state\<CR>
  \<CR>
  state.actions

Expect:
  let processActions (state: SomeType) =
    let a, b = state

    state.actions

Given fsharp:
  let outerFunc state =
    let innerFunc state =
      some code


  let secondOuterFunc firstArg (secondArg: string) thirdArg

Do (Don't change indent when already outdented):
  GA =

Expect:
  let outerFunc state =
    let innerFunc state =
      some code


  let secondOuterFunc firstArg (secondArg: string) thirdArg =

Given fsharp:
Do (Single blank line keeps indent level):
  i
  let state =\<CR>
  something\<CR>
  \<CR>
  let something = "thing"

Expect:
  let state =
    something

    let something = "thing"

