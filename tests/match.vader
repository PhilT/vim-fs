Given fsharp:
Do (Action on same line as condition):
  i
  match event with\<CR>
  | Move(Left) -> Action.move("left")\<CR>
  | Fire -> Action.fire

Expect:
  match event with
  | Move(Left) -> Action.move("left")
  | Fire -> Action.fire

Do (Action on separate line):
  i
  match event with\<CR>
  | Move(Left) ->\<CR>
  Action.move("left")\<CR>
  | Fire ->\<CR>
  Action.fire

Expect:
  match event with
  | Move(Left) ->
    Action.move("left")
  | Fire ->
    Action.fire

Do (Action on separate line with predicates):
  i
  match event with\<CR>
  | Move(Left)\<CR>
  when something = true ->\<CR>
  Action.move("left")\<CR>
  | Fire\<CR>
  when something = true ->\<CR>
  Action.fire

Expect:
  match event with
  | Move(Left)
    when something = true ->
    Action.move("left")
  | Fire
    when something = true ->
    Action.fire

Do (Nested match expressions):
  i
  match event with\<CR>
  | match case 1 ->\<CR>
  doingIt\<CR>
  | case 2 ->\<CR>
  match nested with\<CR>
  | nested case 1 ->\<CR>
  nestedDoingIt\<CR>
  | _ -> nestedCatchAll\<CR>
  | _ -> outerCatchAll

Expect:
  match event with
  | match case 1 ->
    doingIt
  | case 2 ->
    match nested with
    | nested case 1 ->
      nestedDoingIt
    | _ -> nestedCatchAll
  | _ -> outerCatchAll

Do (Line up match case with start of match):
  i
  match event with| match case ->\<Esc>F|
  :doautocmd CursorMoved\<CR>
  i\<CR>

Expect:
  match event with
  | match case ->

Given fsharp:
  match event with
  | match case 1 ->
  doingIt
  | case 2 ->
  match nested with
  | nested case 1 -> nestedDoingIt
  | _ -> nestedCatchAll
  | case 3 ->
  match nested with
  | nested case a ->
  nestedDoingSomething
  | anotherNestedCase ->
  anotherNested
  | _ -> defaultNestedCase
  | _ -> outerCatchAll

Do (Reformatting lines):
  VG=

Expect (Match cases to line up):
  match event with
  | match case 1 ->
    doingIt
  | case 2 ->
    match nested with
    | nested case 1 -> nestedDoingIt
    | _ -> nestedCatchAll
  | case 3 ->
    match nested with
    | nested case a ->
      nestedDoingSomething
    | anotherNestedCase ->
      anotherNested
    | _ -> defaultNestedCase
  | _ -> outerCatchAll

Given fsharp:
Do (Conditionals inside match):
  i
  match event with\<CR>
  | case 1 ->\<CR>
  if condition then\<CR>
  doSomething\<CR>
  else\<CR>
  { field1 = "string"\<CR>
  }\<CR>
  | case 2 ->

Expect:
  match event with
  | case 1 ->
    if condition then
      doSomething
    else
      { field1 = "string"
      }
  | case 2 ->

